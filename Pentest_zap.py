from flask import Flask, render_template, request
import time
from zapv2 import ZAPv2
from datetime import datetime

app = Flask(__name__)

# Function to start active scan and retrieve alerts
def scan_target(zap_api_key, target_url):
    zap_base_url = 'http://localhost:8080'  # ZAP API base URL
    zap = ZAPv2(apikey=zap_api_key, proxies={'http': zap_base_url, 'https': zap_base_url})

    zap.urlopen(target_url)  # Access the target
    time.sleep(2)  # Give ZAP time to access the site

    # Start active scan
    scan_id = zap.ascan.scan(target_url)

    while int(zap.ascan.status(scan_id)) < 100:  # Wait till the active scan completes
        time.sleep(5)
    
    return zap.core.alerts(baseurl=target_url)

# Function to generate HTML report
def generate_report(alerts, url):
    report_name = f"ZAP_Scan_Report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
    report_path = f"./static/{report_name}"
    
    with open(report_path, 'w') as report:
        # HTML Report Header
        report.write(f"<html><head><title>ZAP Scan Report</title></head><body>")
        report.write(f"<h1>Vulnerability Scan Report for {url}</h1>")
        report.write(f"<p>Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>")
        report.write("<hr>")
        
        # Vulnerability Details
        if alerts:
            report.write("<h2>Vulnerabilities Found:</h2><ul>")
            for alert in alerts:
                report.write(f"<li><strong>Issue:</strong> {alert['alert']}<br>")
                report.write(f"<strong>Risk Level:</strong> {alert['risk']}<br>")
                report.write(f"<strong>Description:</strong> {alert['description']}<br>")
                report.write(f"<strong>URL:</strong> {alert['url']}<br>")
                report.write(f"<strong>Parameter:</strong> {alert['param']}<br>")
                report.write(f"<strong>Suggested Fix:</strong> {get_mitigation(alert['alert'])}<br><br></li>")
            report.write("</ul>")
        else:
            report.write("<p>No vulnerabilities found!</p>")
        
        # HTML Report Footer
        report.write("</body></html>")
    
    return report_name

# Function to provide mitigation suggestions
def get_mitigation(issue_type):
    mitigations = {
        'SQL Injection': 'Use prepared statements and parameterized queries to prevent SQL injection.',
        'Cross-Site Scripting (XSS)': 'Sanitize user inputs, escape HTML in output, and use Content Security Policy (CSP).',
        'Session Fixation': 'Regenerate session IDs after login and use secure cookies.',
        'Insecure Direct Object References (IDOR)': 'Use access controls and validate object references against the userâ€™s permissions.',
        'Cross-Site Request Forgery (CSRF)': 'Use anti-CSRF tokens and validate the origin of POST requests.'
    }
    return mitigations.get(issue_type, 'No specific mitigation available.')

@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "POST":
        zap_api_key = request.form["zap_api_key"]
        target_url = request.form["target_url"]
        
        # Perform the scan
        alerts = scan_target(zap_api_key, target_url)
        
        # Generate report
        report_name = generate_report(alerts, target_url)
        return render_template("index.html", report_url=report_name)
    
    return render_template("index.html")

if __name__ == "__main__":
    app.run(debug=True)
